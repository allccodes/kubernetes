# NAMESPACES

kube-system (not for our use. Are system processos, master and managing processs)
kube-public (plubic and acessible data, acessible without authentication)
kub-node-lease (holds information about hard-bits of nodes)
default (we should use this name space)

Restrictions:

Each namespace must define his own ConfigMap, Secret
However we can share services: 
Ex: In ConfigMap in the data field we put something like:
data:
    db_url: <service-name>.<namespace> 



# PODS

kubectl run <pode_name> --image=nginx
kubectl get pods -A
kubectl describe pod <pod_name>
kubectl create pod <pod_name>
kubectl delete pod <pod_name>
kubectl logs <pod_name>
kubectl exec <pode_name> -it /bin/bash
docker exec -it mycluster-node sh


# DEPLOYMENTS

kubectl get deployments -A
kubectl describe deployment <deployment_name>
kubectl create deployment <deployment_name> --image=nginx --replicas=2
kubectl scale deployment <deployment_name> --image=replicas=3


# SERVICES

kubectl get services -A
kubectl describe service <service_name>
kubectl expose deployment <service_name> --type=<loadbalancer>
kubectl delete service <service_name> 


# ROLLOUT

kubectl rollout history deployment nginx --revision=2
kubectl rollout undo deployment nginx --to-revision=2
kubectl rollout restart deployment nginx


# USEFUL FLAGS

-o wide - Display more information about resources
-f - Specify the YAML file
-n - Specify the namespace
--dry-run=client - Preview the changes



# PROVISION STORAGE


Storage types within Kubernetes:

- ephemeral
- persistent


a) Static Provisioning

You need to create the PV object before creating the PVC.


Nota: "Configure a Pod to Use a PersistentVolume for Storage"



b) Dynamic Provisioning

You create the StorageClass first and then the PVC.
Kubernetes automatically provisions a matching PV based on the specifications defined in the StorageClass. The PV is dynamically provisioned when the PVC is created and bound.

